/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface WeatherOracleInterface extends Interface {
  getFunction(
    nameOrSignature: "currentWeather" | "oracle" | "setOracle" | "updateWeather"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "WeatherUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "currentWeather",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setOracle",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWeather",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentWeather",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWeather",
    data: BytesLike
  ): Result;
}

export namespace WeatherUpdatedEvent {
  export type InputTuple = [
    temperature: BigNumberish,
    precipitationProbability: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    temperature: bigint,
    precipitationProbability: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    temperature: bigint;
    precipitationProbability: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WeatherOracle extends BaseContract {
  connect(runner?: ContractRunner | null): WeatherOracle;
  waitForDeployment(): Promise<this>;

  interface: WeatherOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  currentWeather: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        temperature: bigint;
        precipitationProbability: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;

  oracle: TypedContractMethod<[], [string], "view">;

  setOracle: TypedContractMethod<
    [_newOracle: AddressLike],
    [void],
    "nonpayable"
  >;

  updateWeather: TypedContractMethod<
    [_temperature: BigNumberish, _precipitationProbability: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "currentWeather"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint] & {
        temperature: bigint;
        precipitationProbability: bigint;
        lastUpdated: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "oracle"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setOracle"
  ): TypedContractMethod<[_newOracle: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateWeather"
  ): TypedContractMethod<
    [_temperature: BigNumberish, _precipitationProbability: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "WeatherUpdated"
  ): TypedContractEvent<
    WeatherUpdatedEvent.InputTuple,
    WeatherUpdatedEvent.OutputTuple,
    WeatherUpdatedEvent.OutputObject
  >;

  filters: {
    "WeatherUpdated(int256,uint8,uint256)": TypedContractEvent<
      WeatherUpdatedEvent.InputTuple,
      WeatherUpdatedEvent.OutputTuple,
      WeatherUpdatedEvent.OutputObject
    >;
    WeatherUpdated: TypedContractEvent<
      WeatherUpdatedEvent.InputTuple,
      WeatherUpdatedEvent.OutputTuple,
      WeatherUpdatedEvent.OutputObject
    >;
  };
}
